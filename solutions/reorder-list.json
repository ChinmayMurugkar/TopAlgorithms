{
  "problem": {
    "title": "Reorder List",
    "leetcode_id": 143,
    "category": "Linked List",
    "description": "You are given the head of a singly linked-list. The list can be represented as: L0 → L1 → … → Ln - 1 → Ln. Reorder the list to be on the following form: L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …",
    "assumptions": [],
    "example": {}
  },
  "solutions": [
    {
      "title": "Solution 1 – Find Middle, Reverse, Merge",
      "description": "Find middle, reverse second half, then merge the two halves.",
      "code": "public void reorderList(ListNode head) {\n    if (head == null || head.next == null) return;\n    \n    // Find the middle\n    ListNode slow = head, fast = head;\n    while (fast.next != null && fast.next.next != null) {\n        slow = slow.next;\n        fast = fast.next.next;\n    }\n    \n    // Reverse the second half\n    ListNode second = reverseList(slow.next);\n    slow.next = null;\n    \n    // Merge the two halves\n    ListNode first = head;\n    while (second != null) {\n        ListNode temp1 = first.next;\n        ListNode temp2 = second.next;\n        \n        first.next = second;\n        second.next = temp1;\n        \n        first = temp1;\n        second = temp2;\n    }\n}\n\nprivate ListNode reverseList(ListNode head) {\n    ListNode prev = null;\n    ListNode current = head;\n    \n    while (current != null) {\n        ListNode next = current.next;\n        current.next = prev;\n        prev = current;\n        current = next;\n    }\n    \n    return prev;\n}",
      "language": "java",
      "complexity": {
        "time": "O(n)",
        "space": "O(1)"
      }
    },
    {
      "title": "Solution 1 – Find Middle, Reverse, Merge",
      "description": "Find middle, reverse second half, then merge the two halves.",
      "code": "public void reorderList(ListNode head) {\n    if (head == null || head.next == null) return;\n    \n    // Find the middle\n    ListNode slow = head, fast = head;\n    while (fast.next != null && fast.next.next != null) {\n        slow = slow.next;\n        fast = fast.next.next;\n    }\n    \n    // Reverse the second half\n    ListNode second = reverseList(slow.next);\n    slow.next = null;\n    \n    // Merge the two halves\n    ListNode first = head;\n    while (second != null) {\n        ListNode temp1 = first.next;\n        ListNode temp2 = second.next;\n        \n        first.next = second;\n        second.next = temp1;\n        \n        first = temp1;\n        second = temp2;\n    }\n}\n\nprivate ListNode reverseList(ListNode head) {\n    ListNode prev = null;\n    ListNode current = head;\n    \n    while (current != null) {\n        ListNode next = current.next;\n        current.next = prev;\n        prev = current;\n        current = next;\n    }\n    \n    return prev;\n}",
      "language": "java",
      "complexity": {
        "time": "O(n)",
        "space": "O(1)"
      }
    }
  ],
  "variations": [],
  "navigation": {}
}