{
  "problem": {
    "title": "Counting Sort",
    "leetcode_id": null,
    "category": "String/Array/Matrix",
    "description": "Implement counting sort algorithm for sorting integers with a known range.",
    "assumptions": [],
    "example": {}
  },
  "solutions": [
    {
      "title": "Solution 1 – Counting Sort Implementation",
      "description": "Implement counting sort algorithm for integers.",
      "code": "public void countingSort(int[] arr) {\n    int n = arr.length;\n    if (n <= 1) return;\n    \n    // Find the maximum element\n    int max = arr[0];\n    for (int i = 1; i < n; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    \n    // Create count array\n    int[] count = new int[max + 1];\n    \n    // Count occurrences\n    for (int i = 0; i < n; i++) {\n        count[arr[i]]++;\n    }\n    \n    // Modify count array to store actual positions\n    for (int i = 1; i <= max; i++) {\n        count[i] += count[i - 1];\n    }\n    \n    // Create output array\n    int[] output = new int[n];\n    \n    // Build output array\n    for (int i = n - 1; i >= 0; i--) {\n        output[count[arr[i]] - 1] = arr[i];\n        count[arr[i]]--;\n    }\n    \n    // Copy output array back to original array\n    for (int i = 0; i < n; i++) {\n        arr[i] = output[i];\n    }\n}",
      "language": "java",
      "complexity": {
        "time": "O(n + k)",
        "space": "O(n + k)"
      }
    },
    {
      "title": "Solution 1 – Counting Sort Implementation",
      "description": "Implement counting sort algorithm for integers.",
      "code": "public void countingSort(int[] arr) {\n    int n = arr.length;\n    if (n <= 1) return;\n    \n    // Find the maximum element\n    int max = arr[0];\n    for (int i = 1; i < n; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    \n    // Create count array\n    int[] count = new int[max + 1];\n    \n    // Count occurrences\n    for (int i = 0; i < n; i++) {\n        count[arr[i]]++;\n    }\n    \n    // Modify count array to store actual positions\n    for (int i = 1; i <= max; i++) {\n        count[i] += count[i - 1];\n    }\n    \n    // Create output array\n    int[] output = new int[n];\n    \n    // Build output array\n    for (int i = n - 1; i >= 0; i--) {\n        output[count[arr[i]] - 1] = arr[i];\n        count[arr[i]]--;\n    }\n    \n    // Copy output array back to original array\n    for (int i = 0; i < n; i++) {\n        arr[i] = output[i];\n    }\n}",
      "language": "java",
      "complexity": {
        "time": "O(n + k)",
        "space": "O(n + k)"
      }
    }
  ],
  "variations": [],
  "navigation": {}
}