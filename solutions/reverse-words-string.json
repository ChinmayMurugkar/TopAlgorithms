{
  "problem": {
    "title": "Reverse Words in a String",
    "leetcode_id": 151,
    "category": "String/Array/Matrix",
    "description": "Given an input string s, reverse the order of the words.\n                \nNote: A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.",
    "assumptions": [],
    "example": {
      "input": "s = \"the sky is blue\"",
      "output": "\"blue is sky the\""
    }
  },
  "solutions": [
    {
      "title": "Solution 1 – Using Built-in Functions",
      "description": "The simplest approach is to split the string by spaces, reverse the array, and join it back.",
      "code": "public String reverseWords(String s) {\n    // Remove leading and trailing spaces, split by one or more spaces\n    String[] words = s.trim().split(\"\\\\s+\");\n    \n    // Reverse the array\n    for (int i = 0; i < words.length / 2; i++) {\n        String temp = words[i];\n        words[i] = words[words.length - 1 - i];\n        words[words.length - 1 - i] = temp;\n    }\n    \n    // Join with single space\n    return String.join(\" \", words);\n}",
      "language": "java",
      "complexity": {
        "time": "O(n)",
        "space": "O(n)"
      }
    },
    {
      "title": "Solution 2 – Two Pointers (In-place for char array)",
      "description": "If we're given a char array and need to do it in-place:",
      "code": "public void reverseWords(char[] s) {\n    // Reverse the entire string\n    reverse(s, 0, s.length - 1);\n    \n    // Reverse each word\n    int start = 0;\n    for (int i = 0; i < s.length; i++) {\n        if (s[i] == ' ') {\n            reverse(s, start, i - 1);\n            start = i + 1;\n        }\n    }\n    \n    // Reverse the last word\n    reverse(s, start, s.length - 1);\n}\n\nprivate void reverse(char[] s, int left, int right) {\n    while (left < right) {\n        char temp = s[left];\n        s[left] = s[right];\n        s[right] = temp;\n        left++;\n        right--;\n    }\n}",
      "language": "java",
      "complexity": {
        "time": "O(n)",
        "space": "O(1)"
      }
    },
    {
      "title": "Solution 3 – Using Stack",
      "description": "We can use a stack to reverse the order of words:",
      "code": "public String reverseWords(String s) {\n    Stack stack = new Stack<>();\n    StringBuilder word = new StringBuilder();\n    \n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if (c == ' ') {\n            if (word.length() > 0) {\n                stack.push(word.toString());\n                word.setLength(0);\n            }\n        } else {\n            word.append(c);\n        }\n    }\n    \n    // Don't forget the last word\n    if (word.length() > 0) {\n        stack.push(word.toString());\n    }\n    \n    // Build result\n    StringBuilder result = new StringBuilder();\n    while (!stack.isEmpty()) {\n        result.append(stack.pop());\n        if (!stack.isEmpty()) {\n            result.append(\" \");\n        }\n    }\n    \n    return result.toString();\n}",
      "language": "java",
      "complexity": {
        "time": "O(n)",
        "space": "O(n)"
      }
    }
  ],
  "variations": [],
  "navigation": {
    "previous": "rotate-array.html",
    "next": "evaluate-reverse-polish-notation.html"
  }
}