{
  "problem": {
    "title": "3Sum",
    "leetcode_id": null,
    "category": "String/Array/Matrix",
    "description": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.",
    "assumptions": [],
    "example": {}
  },
  "solutions": [
    {
      "title": "Solution 1 – Two Pointers",
      "description": "Sort the array and use two pointers for each element.",
      "code": "public List> threeSum(int[] nums) {\n    List> result = new ArrayList<>();\n    Arrays.sort(nums);\n    \n    for (int i = 0; i < nums.length - 2; i++) {\n        if (i > 0 && nums[i] == nums[i-1]) continue;\n        \n        int left = i + 1, right = nums.length - 1;\n        \n        while (left < right) {\n            int sum = nums[i] + nums[left] + nums[right];\n            \n            if (sum == 0) {\n                result.add(Arrays.asList(nums[i], nums[left], nums[right]));\n                while (left < right && nums[left] == nums[left+1]) left++;\n                while (left < right && nums[right] == nums[right-1]) right--;\n                left++;\n                right--;\n            } else if (sum < 0) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n    \n    return result;\n}",
      "language": "java",
      "complexity": {
        "time": "O(n²)",
        "space": "O(1)"
      }
    },
    {
      "title": "Solution 1 – Two Pointers",
      "description": "Sort the array and use two pointers for each element.",
      "code": "public List> threeSum(int[] nums) {\n    List> result = new ArrayList<>();\n    Arrays.sort(nums);\n    \n    for (int i = 0; i < nums.length - 2; i++) {\n        if (i > 0 && nums[i] == nums[i-1]) continue;\n        \n        int left = i + 1, right = nums.length - 1;\n        \n        while (left < right) {\n            int sum = nums[i] + nums[left] + nums[right];\n            \n            if (sum == 0) {\n                result.add(Arrays.asList(nums[i], nums[left], nums[right]));\n                while (left < right && nums[left] == nums[left+1]) left++;\n                while (left < right && nums[right] == nums[right-1]) right--;\n                left++;\n                right--;\n            } else if (sum < 0) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n    \n    return result;\n}",
      "language": "java",
      "complexity": {
        "time": "O(n²)",
        "space": "O(1)"
      }
    }
  ],
  "variations": [],
  "navigation": {}
}