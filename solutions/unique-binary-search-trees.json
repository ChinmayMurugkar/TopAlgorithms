{
  "problem": {
    "title": "Unique Binary Search Trees",
    "leetcode_id": null,
    "category": "String/Array/Matrix",
    "description": "Given an integer n, return the number of structurally unique BST's (binary search trees) which has exactly n nodes of unique values from 1 to n.",
    "assumptions": [],
    "example": {}
  },
  "solutions": [
    {
      "title": "Solution 1 – Dynamic Programming",
      "description": "Use DP to count unique BSTs.",
      "code": "public int numTrees(int n) {\n    int[] dp = new int[n + 1];\n    dp[0] = 1;\n    dp[1] = 1;\n    \n    for (int i = 2; i <= n; i++) {\n        for (int j = 1; j <= i; j++) {\n            dp[i] += dp[j - 1] * dp[i - j];\n        }\n    }\n    \n    return dp[n];\n}",
      "language": "java",
      "complexity": {
        "time": "O(n²)",
        "space": "O(n)"
      }
    }
  ],
  "variations": [],
  "navigation": {
    "previous": "two-sum.html",
    "next": "two-sum-iii.html"
  }
}