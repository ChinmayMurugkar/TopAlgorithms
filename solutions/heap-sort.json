{
  "problem": {
    "title": "Heap Sort",
    "leetcode_id": null,
    "category": "Sorting",
    "description": "Implement heap sort algorithm to sort an array of integers in ascending order. Heap sort is a comparison-based sorting algorithm that uses a binary heap data structure.",
    "assumptions": [],
    "example": {}
  },
  "solutions": [
    {
      "title": "Solution 1 â€“ Heap Sort Implementation",
      "description": "Implement heap sort using max heap.",
      "code": "public void heapSort(int[] arr) {\n    int n = arr.length;\n    \n    // Build max heap\n    for (int i = n / 2 - 1; i >= 0; i--) {\n        heapify(arr, n, i);\n    }\n    \n    // Extract elements from heap one by one\n    for (int i = n - 1; i > 0; i--) {\n        // Move current root to end\n        int temp = arr[0];\n        arr[0] = arr[i];\n        arr[i] = temp;\n        \n        // Call heapify on the reduced heap\n        heapify(arr, i, 0);\n    }\n}\n\nprivate void heapify(int[] arr, int n, int i) {\n    int largest = i;\n    int left = 2 * i + 1;\n    int right = 2 * i + 2;\n    \n    if (left < n && arr[left] > arr[largest]) {\n        largest = left;\n    }\n    \n    if (right < n && arr[right] > arr[largest]) {\n        largest = right;\n    }\n    \n    if (largest != i) {\n        int temp = arr[i];\n        arr[i] = arr[largest];\n        arr[largest] = temp;\n        \n        heapify(arr, n, largest);\n    }\n}",
      "language": "java",
      "complexity": {
        "time": "O(n log n)",
        "space": "O(1)"
      }
    }
  ],
  "variations": [],
  "navigation": {
    "previous": "merge-sort.html",
    "next": "bubble-sort.html"
  }
}