{
  "problem": {
    "title": "Merge Intervals",
    "leetcode_id": 56,
    "category": "String/Array/Matrix",
    "description": "Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.",
    "assumptions": [],
    "example": {}
  },
  "solutions": [
    {
      "title": "Solution 1 – Sort and Merge",
      "description": "Sort intervals by start time and merge overlapping intervals.",
      "code": "public int[][] merge(int[][] intervals) {\n    if (intervals.length <= 1) return intervals;\n    \n    // Sort intervals by start time\n    Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));\n    \n    List result = new ArrayList<>();\n    int[] current = intervals[0];\n    \n    for (int i = 1; i < intervals.length; i++) {\n        if (current[1] >= intervals[i][0]) {\n            // Overlapping intervals, merge them\n            current[1] = Math.max(current[1], intervals[i][1]);\n        } else {\n            // Non-overlapping interval, add current to result\n            result.add(current);\n            current = intervals[i];\n        }\n    }\n    \n    result.add(current);\n    \n    return result.toArray(new int[result.size()][]);\n}",
      "language": "java",
      "complexity": {
        "time": "O(n log n)",
        "space": "O(n)"
      }
    },
    {
      "title": "Solution 1 – Sort and Merge",
      "description": "Sort intervals by start time and merge overlapping intervals.",
      "code": "public int[][] merge(int[][] intervals) {\n    if (intervals.length <= 1) return intervals;\n    \n    // Sort intervals by start time\n    Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));\n    \n    List result = new ArrayList<>();\n    int[] current = intervals[0];\n    \n    for (int i = 1; i < intervals.length; i++) {\n        if (current[1] >= intervals[i][0]) {\n            // Overlapping intervals, merge them\n            current[1] = Math.max(current[1], intervals[i][1]);\n        } else {\n            // Non-overlapping interval, add current to result\n            result.add(current);\n            current = intervals[i];\n        }\n    }\n    \n    result.add(current);\n    \n    return result.toArray(new int[result.size()][]);\n}",
      "language": "java",
      "complexity": {
        "time": "O(n log n)",
        "space": "O(n)"
      }
    }
  ],
  "variations": [],
  "navigation": {}
}