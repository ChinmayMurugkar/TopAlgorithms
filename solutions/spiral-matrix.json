{
  "problem": {
    "title": "Spiral Matrix",
    "leetcode_id": 54,
    "category": "Matrix",
    "description": "Given an m x n matrix, return all elements of the matrix in spiral order.",
    "assumptions": [],
    "example": {}
  },
  "solutions": [
    {
      "title": "Solution 1 – Layer by Layer",
      "description": "Traverse the matrix layer by layer in spiral order.",
      "code": "public List spiralOrder(int[][] matrix) {\n    List result = new ArrayList<>();\n    if (matrix == null || matrix.length == 0) return result;\n    \n    int top = 0, bottom = matrix.length - 1;\n    int left = 0, right = matrix[0].length - 1;\n    \n    while (top <= bottom && left <= right) {\n        // Traverse right\n        for (int j = left; j <= right; j++) {\n            result.add(matrix[top][j]);\n        }\n        top++;\n        \n        // Traverse down\n        for (int i = top; i <= bottom; i++) {\n            result.add(matrix[i][right]);\n        }\n        right--;\n        \n        // Traverse left\n        if (top <= bottom) {\n            for (int j = right; j >= left; j--) {\n                result.add(matrix[bottom][j]);\n            }\n            bottom--;\n        }\n        \n        // Traverse up\n        if (left <= right) {\n            for (int i = bottom; i >= top; i--) {\n                result.add(matrix[i][left]);\n            }\n            left++;\n        }\n    }\n    \n    return result;\n}",
      "language": "java",
      "complexity": {
        "time": "O(m×n)",
        "space": "O(1)"
      }
    },
    {
      "title": "Solution 1 – Layer by Layer",
      "description": "Traverse the matrix layer by layer in spiral order.",
      "code": "public List spiralOrder(int[][] matrix) {\n    List result = new ArrayList<>();\n    if (matrix == null || matrix.length == 0) return result;\n    \n    int top = 0, bottom = matrix.length - 1;\n    int left = 0, right = matrix[0].length - 1;\n    \n    while (top <= bottom && left <= right) {\n        // Traverse right\n        for (int j = left; j <= right; j++) {\n            result.add(matrix[top][j]);\n        }\n        top++;\n        \n        // Traverse down\n        for (int i = top; i <= bottom; i++) {\n            result.add(matrix[i][right]);\n        }\n        right--;\n        \n        // Traverse left\n        if (top <= bottom) {\n            for (int j = right; j >= left; j--) {\n                result.add(matrix[bottom][j]);\n            }\n            bottom--;\n        }\n        \n        // Traverse up\n        if (left <= right) {\n            for (int i = bottom; i >= top; i--) {\n                result.add(matrix[i][left]);\n            }\n            left++;\n        }\n    }\n    \n    return result;\n}",
      "language": "java",
      "complexity": {
        "time": "O(m×n)",
        "space": "O(1)"
      }
    }
  ],
  "variations": [],
  "navigation": {}
}