{
  "problem": {
    "title": "Climbing Stairs",
    "leetcode_id": 70,
    "category": "Dynamic Programming",
    "description": "You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?",
    "assumptions": [],
    "example": {}
  },
  "solutions": [
    {
      "title": "Solution 1 â€“ Dynamic Programming",
      "description": "Use DP to calculate the number of ways to climb stairs.",
      "code": "public int climbStairs(int n) {\n    if (n <= 2) {\n        return n;\n    }\n    \n    int[] dp = new int[n + 1];\n    dp[1] = 1;\n    dp[2] = 2;\n    \n    for (int i = 3; i <= n; i++) {\n        dp[i] = dp[i - 1] + dp[i - 2];\n    }\n    \n    return dp[n];\n}",
      "language": "java",
      "complexity": {
        "time": "O(n)",
        "space": "O(n)"
      }
    }
  ],
  "variations": [],
  "navigation": {
    "previous": "course-schedule.html",
    "next": "house-robber.html"
  }
}