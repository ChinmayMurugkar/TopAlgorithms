{
  "problem": {
    "title": "Two Sum II",
    "leetcode_id": null,
    "category": "String/Array/Matrix",
    "description": "Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number.",
    "assumptions": [],
    "example": {}
  },
  "solutions": [
    {
      "title": "Solution 1 – Two Pointers",
      "description": "Use two pointers starting from both ends of the sorted array.",
      "code": "public int[] twoSum(int[] numbers, int target) {\n    int left = 0, right = numbers.length - 1;\n    \n    while (left < right) {\n        int sum = numbers[left] + numbers[right];\n        \n        if (sum == target) {\n            return new int[]{left + 1, right + 1};\n        } else if (sum < target) {\n            left++;\n        } else {\n            right--;\n        }\n    }\n    \n    return new int[]{};\n}",
      "language": "java",
      "complexity": {
        "time": "O(n)",
        "space": "O(1)"
      }
    },
    {
      "title": "Solution 1 – Two Pointers",
      "description": "Use two pointers starting from both ends of the sorted array.",
      "code": "public int[] twoSum(int[] numbers, int target) {\n    int left = 0, right = numbers.length - 1;\n    \n    while (left < right) {\n        int sum = numbers[left] + numbers[right];\n        \n        if (sum == target) {\n            return new int[]{left + 1, right + 1};\n        } else if (sum < target) {\n            left++;\n        } else {\n            right--;\n        }\n    }\n    \n    return new int[]{};\n}",
      "language": "java",
      "complexity": {
        "time": "O(n)",
        "space": "O(1)"
      }
    }
  ],
  "variations": [],
  "navigation": {}
}