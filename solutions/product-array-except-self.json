{
  "problem": {
    "title": "Product of Array Except Self",
    "leetcode_id": null,
    "category": "String/Array/Matrix",
    "description": "Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].",
    "assumptions": [],
    "example": {}
  },
  "solutions": [
    {
      "title": "Solution 1 – Two Pass",
      "description": "Use two passes to calculate product without division.",
      "code": "public int[] productExceptSelf(int[] nums) {\n    int n = nums.length;\n    int[] result = new int[n];\n    \n    // Calculate left products\n    result[0] = 1;\n    for (int i = 1; i < n; i++) {\n        result[i] = result[i - 1] * nums[i - 1];\n    }\n    \n    // Calculate right products and combine\n    int right = 1;\n    for (int i = n - 1; i >= 0; i--) {\n        result[i] = result[i] * right;\n        right *= nums[i];\n    }\n    \n    return result;\n}",
      "language": "java",
      "complexity": {
        "time": "O(n)",
        "space": "O(1)"
      }
    },
    {
      "title": "Solution 1 – Two Pass",
      "description": "Use two passes to calculate product without division.",
      "code": "public int[] productExceptSelf(int[] nums) {\n    int n = nums.length;\n    int[] result = new int[n];\n    \n    // Calculate left products\n    result[0] = 1;\n    for (int i = 1; i < n; i++) {\n        result[i] = result[i - 1] * nums[i - 1];\n    }\n    \n    // Calculate right products and combine\n    int right = 1;\n    for (int i = n - 1; i >= 0; i--) {\n        result[i] = result[i] * right;\n        right *= nums[i];\n    }\n    \n    return result;\n}",
      "language": "java",
      "complexity": {
        "time": "O(n)",
        "space": "O(1)"
      }
    }
  ],
  "variations": [],
  "navigation": {}
}