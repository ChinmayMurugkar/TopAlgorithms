{
  "problem": {
    "title": "Reverse Integer",
    "leetcode_id": null,
    "category": "String/Array/Matrix",
    "description": "Given a signed 32-bit integer x, return x with its digits reversed.",
    "assumptions": [],
    "example": {}
  },
  "solutions": [
    {
      "title": "Solution 1 â€“ Digit by Digit",
      "description": "Reverse digits one by one, checking for overflow.",
      "code": "public int reverse(int x) {\n    int result = 0;\n    \n    while (x != 0) {\n        int digit = x % 10;\n        x /= 10;\n        \n        if (result > Integer.MAX_VALUE / 10 || \n            (result == Integer.MAX_VALUE / 10 && digit > 7)) return 0;\n        if (result < Integer.MIN_VALUE / 10 || \n            (result == Integer.MIN_VALUE / 10 && digit < -8)) return 0;\n        \n        result = result * 10 + digit;\n    }\n    \n    return result;\n}",
      "language": "java",
      "complexity": {
        "time": "O(log n)",
        "space": "O(1)"
      }
    },
    {
      "title": "Solution 1 â€“ Digit by Digit",
      "description": "Reverse digits one by one, checking for overflow.",
      "code": "public int reverse(int x) {\n    int result = 0;\n    \n    while (x != 0) {\n        int digit = x % 10;\n        x /= 10;\n        \n        if (result > Integer.MAX_VALUE / 10 || \n            (result == Integer.MAX_VALUE / 10 && digit > 7)) return 0;\n        if (result < Integer.MIN_VALUE / 10 || \n            (result == Integer.MIN_VALUE / 10 && digit < -8)) return 0;\n        \n        result = result * 10 + digit;\n    }\n    \n    return result;\n}",
      "language": "java",
      "complexity": {
        "time": "O(log n)",
        "space": "O(1)"
      }
    }
  ],
  "variations": [],
  "navigation": {}
}