{
  "problem": {
    "title": "Binary Search Tree Iterator",
    "leetcode_id": null,
    "category": "String/Array/Matrix",
    "description": "Implement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST).",
    "assumptions": [],
    "example": {}
  },
  "solutions": [
    {
      "title": "Solution 1 – Stack",
      "description": "Use stack to simulate inorder traversal.",
      "code": "class BSTIterator {\n    private Stack stack;\n    \n    public BSTIterator(TreeNode root) {\n        stack = new Stack<>();\n        pushAll(root);\n    }\n    \n    public int next() {\n        TreeNode node = stack.pop();\n        pushAll(node.right);\n        return node.val;\n    }\n    \n    public boolean hasNext() {\n        return !stack.isEmpty();\n    }\n    \n    private void pushAll(TreeNode root) {\n        while (root != null) {\n            stack.push(root);\n            root = root.left;\n        }\n    }\n}",
      "language": "java",
      "complexity": {
        "time": "O(1) amortized",
        "space": "O(h)"
      }
    },
    {
      "title": "Solution 1 – Stack",
      "description": "Use stack to simulate inorder traversal.",
      "code": "class BSTIterator {\n    private Stack stack;\n    \n    public BSTIterator(TreeNode root) {\n        stack = new Stack<>();\n        pushAll(root);\n    }\n    \n    public int next() {\n        TreeNode node = stack.pop();\n        pushAll(node.right);\n        return node.val;\n    }\n    \n    public boolean hasNext() {\n        return !stack.isEmpty();\n    }\n    \n    private void pushAll(TreeNode root) {\n        while (root != null) {\n            stack.push(root);\n            root = root.left;\n        }\n    }\n}",
      "language": "java",
      "complexity": {
        "time": "O(1) amortized",
        "space": "O(h)"
      }
    }
  ],
  "variations": [],
  "navigation": {}
}