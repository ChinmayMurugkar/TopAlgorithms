{
  "problem": {
    "title": "Convert Sorted Array to Binary Search Tree",
    "leetcode_id": null,
    "category": "String/Array/Matrix",
    "description": "Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.",
    "assumptions": [],
    "example": {}
  },
  "solutions": [
    {
      "title": "Solution 1 – Recursive",
      "description": "Use the middle element as root and recursively build left and right subtrees.",
      "code": "public TreeNode sortedArrayToBST(int[] nums) {\n    return buildBST(nums, 0, nums.length - 1);\n}\n\nprivate TreeNode buildBST(int[] nums, int left, int right) {\n    if (left > right) return null;\n    \n    int mid = left + (right - left) / 2;\n    TreeNode root = new TreeNode(nums[mid]);\n    \n    root.left = buildBST(nums, left, mid - 1);\n    root.right = buildBST(nums, mid + 1, right);\n    \n    return root;\n}",
      "language": "java",
      "complexity": {
        "time": "O(n)",
        "space": "O(log n)"
      }
    },
    {
      "title": "Solution 1 – Recursive",
      "description": "Use the middle element as root and recursively build left and right subtrees.",
      "code": "public TreeNode sortedArrayToBST(int[] nums) {\n    return buildBST(nums, 0, nums.length - 1);\n}\n\nprivate TreeNode buildBST(int[] nums, int left, int right) {\n    if (left > right) return null;\n    \n    int mid = left + (right - left) / 2;\n    TreeNode root = new TreeNode(nums[mid]);\n    \n    root.left = buildBST(nums, left, mid - 1);\n    root.right = buildBST(nums, mid + 1, right);\n    \n    return root;\n}",
      "language": "java",
      "complexity": {
        "time": "O(n)",
        "space": "O(log n)"
      }
    }
  ],
  "variations": [],
  "navigation": {}
}