{
  "problem": {
    "title": "Integer Break",
    "leetcode_id": null,
    "category": "String/Array/Matrix",
    "description": "Given an integer n, break it into the sum of k positive integers, where k >= 2, and maximize the product of those integers.",
    "assumptions": [],
    "example": {}
  },
  "solutions": [
    {
      "title": "Solution 1 – Dynamic Programming",
      "description": "Use DP to find the maximum product.",
      "code": "public int integerBreak(int n) {\n    if (n <= 3) return n - 1;\n    \n    int[] dp = new int[n + 1];\n    dp[1] = 1;\n    dp[2] = 2;\n    dp[3] = 3;\n    \n    for (int i = 4; i <= n; i++) {\n        for (int j = 1; j <= i / 2; j++) {\n            dp[i] = Math.max(dp[i], dp[j] * dp[i - j]);\n        }\n    }\n    \n    return dp[n];\n}",
      "language": "java",
      "complexity": {
        "time": "O(n²)",
        "space": "O(n)"
      }
    },
    {
      "title": "Solution 1 – Dynamic Programming",
      "description": "Use DP to find the maximum product.",
      "code": "public int integerBreak(int n) {\n    if (n <= 3) return n - 1;\n    \n    int[] dp = new int[n + 1];\n    dp[1] = 1;\n    dp[2] = 2;\n    dp[3] = 3;\n    \n    for (int i = 4; i <= n; i++) {\n        for (int j = 1; j <= i / 2; j++) {\n            dp[i] = Math.max(dp[i], dp[j] * dp[i - j]);\n        }\n    }\n    \n    return dp[n];\n}",
      "language": "java",
      "complexity": {
        "time": "O(n²)",
        "space": "O(n)"
      }
    }
  ],
  "variations": [],
  "navigation": {}
}