{
  "problem": {
    "title": "Sum Root to Leaf Numbers",
    "leetcode_id": null,
    "category": "String/Array/Matrix",
    "description": "You are given the root of a binary tree containing digits from 0 to 9 only.",
    "assumptions": [],
    "example": {}
  },
  "solutions": [
    {
      "title": "Solution 1 – DFS",
      "description": "Use DFS to calculate sum of all root-to-leaf numbers.",
      "code": "public int sumNumbers(TreeNode root) {\n    return dfs(root, 0);\n}\n\nprivate int dfs(TreeNode root, int sum) {\n    if (root == null) return 0;\n    \n    sum = sum * 10 + root.val;\n    \n    if (root.left == null && root.right == null) {\n        return sum;\n    }\n    \n    return dfs(root.left, sum) + dfs(root.right, sum);\n}",
      "language": "java",
      "complexity": {
        "time": "O(n)",
        "space": "O(h)"
      }
    },
    {
      "title": "Solution 1 – DFS",
      "description": "Use DFS to calculate sum of all root-to-leaf numbers.",
      "code": "public int sumNumbers(TreeNode root) {\n    return dfs(root, 0);\n}\n\nprivate int dfs(TreeNode root, int sum) {\n    if (root == null) return 0;\n    \n    sum = sum * 10 + root.val;\n    \n    if (root.left == null && root.right == null) {\n        return sum;\n    }\n    \n    return dfs(root.left, sum) + dfs(root.right, sum);\n}",
      "language": "java",
      "complexity": {
        "time": "O(n)",
        "space": "O(h)"
      }
    }
  ],
  "variations": [],
  "navigation": {}
}