{
  "problem": {
    "title": "Longest Valid Parentheses",
    "leetcode_id": null,
    "category": "String/Array/Matrix",
    "description": "Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.",
    "assumptions": [],
    "example": {}
  },
  "solutions": [
    {
      "title": "Solution 1 â€“ Stack",
      "description": "Use stack to track valid parentheses positions.",
      "code": "public int longestValidParentheses(String s) {\n    Stack stack = new Stack<>();\n    stack.push(-1);\n    int maxLen = 0;\n    \n    for (int i = 0; i < s.length(); i++) {\n        if (s.charAt(i) == '(') {\n            stack.push(i);\n        } else {\n            stack.pop();\n            if (stack.isEmpty()) {\n                stack.push(i);\n            } else {\n                maxLen = Math.max(maxLen, i - stack.peek());\n            }\n        }\n    }\n    \n    return maxLen;\n}",
      "language": "java",
      "complexity": {
        "time": "O(n)",
        "space": "O(n)"
      }
    }
  ],
  "variations": [],
  "navigation": {
    "previous": "two-sum.html",
    "next": "two-sum-iii.html"
  }
}