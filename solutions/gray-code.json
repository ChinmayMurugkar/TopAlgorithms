{
  "problem": {
    "title": "Gray Code",
    "leetcode_id": null,
    "category": "String/Array/Matrix",
    "description": "An n-bit gray code sequence is a sequence of 2n integers where: Every integer is in the inclusive range [0, 2n - 1], The first integer is 0, An integer appears no more than once in the sequence.",
    "assumptions": [],
    "example": {}
  },
  "solutions": [
    {
      "title": "Solution 1 – Recursive",
      "description": "Generate gray code recursively.",
      "code": "public List grayCode(int n) {\n    List result = new ArrayList<>();\n    result.add(0);\n    \n    for (int i = 0; i < n; i++) {\n        int size = result.size();\n        for (int j = size - 1; j >= 0; j--) {\n            result.add(result.get(j) | (1 << i));\n        }\n    }\n    \n    return result;\n}",
      "language": "java",
      "complexity": {
        "time": "O(2^n)",
        "space": "O(2^n)"
      }
    },
    {
      "title": "Solution 1 – Recursive",
      "description": "Generate gray code recursively.",
      "code": "public List grayCode(int n) {\n    List result = new ArrayList<>();\n    result.add(0);\n    \n    for (int i = 0; i < n; i++) {\n        int size = result.size();\n        for (int j = size - 1; j >= 0; j--) {\n            result.add(result.get(j) | (1 << i));\n        }\n    }\n    \n    return result;\n}",
      "language": "java",
      "complexity": {
        "time": "O(2^n)",
        "space": "O(2^n)"
      }
    }
  ],
  "variations": [],
  "navigation": {}
}