{
  "problem": {
    "title": "Single Number",
    "leetcode_id": 136,
    "category": "Bit Manipulation",
    "description": "Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.\n                \nConstraints:\n\n1 ≤ nums.length ≤ 3 * 10⁴\n-3 * 10⁴ ≤ nums[i] ≤ 3 * 10⁴\nEach element in the array appears twice except for one element which appears only once.",
    "assumptions": [],
    "example": {
      "input": "nums = [2,2,1]",
      "output": "1"
    }
  },
  "solutions": [
    {
      "title": "Solution 1 – Hash Set",
      "description": "Use a hash set to track seen numbers. If a number is seen twice, remove it from the set.",
      "code": "public int singleNumber(int[] nums) {\n    Set set = new HashSet<>();\n    \n    for (int num : nums) {\n        if (set.contains(num)) {\n            set.remove(num);\n        } else {\n            set.add(num);\n        }\n    }\n    \n    return set.iterator().next();\n}",
      "language": "java",
      "complexity": {
        "time": "O(n)",
        "space": "O(n)"
      }
    },
    {
      "title": "Solution 2 – XOR (Optimal)",
      "description": "Use XOR operation. XOR of a number with itself is 0, and XOR with 0 is the number itself.",
      "code": "public int singleNumber(int[] nums) {\n    int result = 0;\n    \n    for (int num : nums) {\n        result ^= num;\n    }\n    \n    return result;\n}",
      "language": "java",
      "complexity": {
        "time": "O(n)",
        "space": "O(1)"
      }
    },
    {
      "title": "Solution 3 – Math Approach",
      "description": "Use mathematical formula: 2 * (sum of unique elements) - sum of all elements = single number.",
      "code": "public int singleNumber(int[] nums) {\n    Set uniqueNums = new HashSet<>();\n    int sum = 0;\n    \n    for (int num : nums) {\n        uniqueNums.add(num);\n        sum += num;\n    }\n    \n    int uniqueSum = 0;\n    for (int num : uniqueNums) {\n        uniqueSum += num;\n    }\n    \n    return 2 * uniqueSum - sum;\n}",
      "language": "java",
      "complexity": {
        "time": "O(n)",
        "space": "O(n)"
      }
    },
    {
      "title": "Variations",
      "description": "Every element appears three times except for one. Find that single one.",
      "code": "public int singleNumber(int[] nums) {\n    int ones = 0, twos = 0;\n    \n    for (int num : nums) {\n        ones = (ones ^ num) & ~twos;\n        twos = (twos ^ num) & ~ones;\n    }\n    \n    return ones;\n}",
      "language": "java"
    },
    {
      "title": "Bit Manipulation Tricks",
      "code": "// Set a bit\nn |= (1 << position);\n\n// Clear a bit\nn &= ~(1 << position);\n\n// Toggle a bit\nn ^= (1 << position);\n\n// Check if bit is set\nboolean isSet = (n & (1 << position)) != 0;\n\n// Get rightmost set bit\nint rightmostSetBit = n & -n;\n\n// Count set bits\nint count = 0;\nwhile (n != 0) {\n    count += n & 1;\n    n >>= 1;\n}",
      "language": "java"
    }
  ],
  "variations": [],
  "navigation": {
    "next": "reverse-bits.html"
  }
}