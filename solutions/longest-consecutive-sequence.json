{
  "problem": {
    "title": "Longest Consecutive Sequence",
    "leetcode_id": null,
    "category": "String/Array/Matrix",
    "description": "Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.",
    "assumptions": [],
    "example": {}
  },
  "solutions": [
    {
      "title": "Solution 1 – HashSet",
      "description": "Use HashSet to find consecutive sequences.",
      "code": "public int longestConsecutive(int[] nums) {\n    Set set = new HashSet<>();\n    for (int num : nums) {\n        set.add(num);\n    }\n    \n    int maxLength = 0;\n    \n    for (int num : set) {\n        if (!set.contains(num - 1)) {\n            int currentNum = num;\n            int currentLength = 1;\n            \n            while (set.contains(currentNum + 1)) {\n                currentNum++;\n                currentLength++;\n            }\n            \n            maxLength = Math.max(maxLength, currentLength);\n        }\n    }\n    \n    return maxLength;\n}",
      "language": "java",
      "complexity": {
        "time": "O(n)",
        "space": "O(n)"
      }
    },
    {
      "title": "Solution 1 – HashSet",
      "description": "Use HashSet to find consecutive sequences.",
      "code": "public int longestConsecutive(int[] nums) {\n    Set set = new HashSet<>();\n    for (int num : nums) {\n        set.add(num);\n    }\n    \n    int maxLength = 0;\n    \n    for (int num : set) {\n        if (!set.contains(num - 1)) {\n            int currentNum = num;\n            int currentLength = 1;\n            \n            while (set.contains(currentNum + 1)) {\n                currentNum++;\n                currentLength++;\n            }\n            \n            maxLength = Math.max(maxLength, currentLength);\n        }\n    }\n    \n    return maxLength;\n}",
      "language": "java",
      "complexity": {
        "time": "O(n)",
        "space": "O(n)"
      }
    }
  ],
  "variations": [],
  "navigation": {}
}