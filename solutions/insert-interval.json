{
  "problem": {
    "title": "Insert Interval",
    "leetcode_id": null,
    "category": "String/Array/Matrix",
    "description": "Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).",
    "assumptions": [],
    "example": {}
  },
  "solutions": [
    {
      "title": "Solution 1 – Linear Scan",
      "description": "Insert new interval and merge overlapping intervals.",
      "code": "public int[][] insert(int[][] intervals, int[] newInterval) {\n    List result = new ArrayList<>();\n    int i = 0;\n    \n    // Add intervals before newInterval\n    while (i < intervals.length && intervals[i][1] < newInterval[0]) {\n        result.add(intervals[i]);\n        i++;\n    }\n    \n    // Merge overlapping intervals\n    while (i < intervals.length && intervals[i][0] <= newInterval[1]) {\n        newInterval[0] = Math.min(newInterval[0], intervals[i][0]);\n        newInterval[1] = Math.max(newInterval[1], intervals[i][1]);\n        i++;\n    }\n    result.add(newInterval);\n    \n    // Add remaining intervals\n    while (i < intervals.length) {\n        result.add(intervals[i]);\n        i++;\n    }\n    \n    return result.toArray(new int[result.size()][]);\n}",
      "language": "java",
      "complexity": {
        "time": "O(n)",
        "space": "O(n)"
      }
    },
    {
      "title": "Solution 1 – Linear Scan",
      "description": "Insert new interval and merge overlapping intervals.",
      "code": "public int[][] insert(int[][] intervals, int[] newInterval) {\n    List result = new ArrayList<>();\n    int i = 0;\n    \n    // Add intervals before newInterval\n    while (i < intervals.length && intervals[i][1] < newInterval[0]) {\n        result.add(intervals[i]);\n        i++;\n    }\n    \n    // Merge overlapping intervals\n    while (i < intervals.length && intervals[i][0] <= newInterval[1]) {\n        newInterval[0] = Math.min(newInterval[0], intervals[i][0]);\n        newInterval[1] = Math.max(newInterval[1], intervals[i][1]);\n        i++;\n    }\n    result.add(newInterval);\n    \n    // Add remaining intervals\n    while (i < intervals.length) {\n        result.add(intervals[i]);\n        i++;\n    }\n    \n    return result.toArray(new int[result.size()][]);\n}",
      "language": "java",
      "complexity": {
        "time": "O(n)",
        "space": "O(n)"
      }
    }
  ],
  "variations": [],
  "navigation": {}
}