{
  "problem": {
    "title": "Path Sum II",
    "leetcode_id": null,
    "category": "String/Array/Matrix",
    "description": "Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum.",
    "assumptions": [],
    "example": {}
  },
  "solutions": [
    {
      "title": "Solution 1 – DFS with Backtracking",
      "description": "Use DFS with backtracking to find all paths with given sum.",
      "code": "public List> pathSum(TreeNode root, int targetSum) {\n    List> result = new ArrayList<>();\n    List path = new ArrayList<>();\n    \n    dfs(root, targetSum, path, result);\n    return result;\n}\n\nprivate void dfs(TreeNode root, int targetSum, List path, List> result) {\n    if (root == null) return;\n    \n    path.add(root.val);\n    \n    if (root.left == null && root.right == null && targetSum == root.val) {\n        result.add(new ArrayList<>(path));\n    }\n    \n    dfs(root.left, targetSum - root.val, path, result);\n    dfs(root.right, targetSum - root.val, path, result);\n    \n    path.remove(path.size() - 1);\n}",
      "language": "java",
      "complexity": {
        "time": "O(n)",
        "space": "O(h)"
      }
    },
    {
      "title": "Solution 1 – DFS with Backtracking",
      "description": "Use DFS with backtracking to find all paths with given sum.",
      "code": "public List> pathSum(TreeNode root, int targetSum) {\n    List> result = new ArrayList<>();\n    List path = new ArrayList<>();\n    \n    dfs(root, targetSum, path, result);\n    return result;\n}\n\nprivate void dfs(TreeNode root, int targetSum, List path, List> result) {\n    if (root == null) return;\n    \n    path.add(root.val);\n    \n    if (root.left == null && root.right == null && targetSum == root.val) {\n        result.add(new ArrayList<>(path));\n    }\n    \n    dfs(root.left, targetSum - root.val, path, result);\n    dfs(root.right, targetSum - root.val, path, result);\n    \n    path.remove(path.size() - 1);\n}",
      "language": "java",
      "complexity": {
        "time": "O(n)",
        "space": "O(h)"
      }
    }
  ],
  "variations": [],
  "navigation": {}
}