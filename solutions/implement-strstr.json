{
  "problem": {
    "title": "Implement strStr()",
    "leetcode_id": null,
    "category": "String/Array/Matrix",
    "description": "Implement strStr(). Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.",
    "assumptions": [],
    "example": {}
  },
  "solutions": [
    {
      "title": "Solution 1 – KMP Algorithm",
      "description": "Use KMP algorithm for efficient string matching.",
      "code": "public int strStr(String haystack, String needle) {\n    if (needle.isEmpty()) return 0;\n    if (haystack.isEmpty()) return -1;\n    \n    int[] lps = computeLPS(needle);\n    int i = 0, j = 0;\n    \n    while (i < haystack.length()) {\n        if (haystack.charAt(i) == needle.charAt(j)) {\n            i++;\n            j++;\n        }\n        \n        if (j == needle.length()) {\n            return i - j;\n        } else if (i < haystack.length() && haystack.charAt(i) != needle.charAt(j)) {\n            if (j != 0) {\n                j = lps[j - 1];\n            } else {\n                i++;\n            }\n        }\n    }\n    \n    return -1;\n}\n\nprivate int[] computeLPS(String pattern) {\n    int[] lps = new int[pattern.length()];\n    int len = 0;\n    int i = 1;\n    \n    while (i < pattern.length()) {\n        if (pattern.charAt(i) == pattern.charAt(len)) {\n            len++;\n            lps[i] = len;\n            i++;\n        } else {\n            if (len != 0) {\n                len = lps[len - 1];\n            } else {\n                lps[i] = 0;\n                i++;\n            }\n        }\n    }\n    \n    return lps;\n}",
      "language": "java",
      "complexity": {
        "time": "O(m + n)",
        "space": "O(n)"
      }
    },
    {
      "title": "Solution 1 – KMP Algorithm",
      "description": "Use KMP algorithm for efficient string matching.",
      "code": "public int strStr(String haystack, String needle) {\n    if (needle.isEmpty()) return 0;\n    if (haystack.isEmpty()) return -1;\n    \n    int[] lps = computeLPS(needle);\n    int i = 0, j = 0;\n    \n    while (i < haystack.length()) {\n        if (haystack.charAt(i) == needle.charAt(j)) {\n            i++;\n            j++;\n        }\n        \n        if (j == needle.length()) {\n            return i - j;\n        } else if (i < haystack.length() && haystack.charAt(i) != needle.charAt(j)) {\n            if (j != 0) {\n                j = lps[j - 1];\n            } else {\n                i++;\n            }\n        }\n    }\n    \n    return -1;\n}\n\nprivate int[] computeLPS(String pattern) {\n    int[] lps = new int[pattern.length()];\n    int len = 0;\n    int i = 1;\n    \n    while (i < pattern.length()) {\n        if (pattern.charAt(i) == pattern.charAt(len)) {\n            len++;\n            lps[i] = len;\n            i++;\n        } else {\n            if (len != 0) {\n                len = lps[len - 1];\n            } else {\n                lps[i] = 0;\n                i++;\n            }\n        }\n    }\n    \n    return lps;\n}",
      "language": "java",
      "complexity": {
        "time": "O(m + n)",
        "space": "O(n)"
      }
    }
  ],
  "variations": [],
  "navigation": {}
}