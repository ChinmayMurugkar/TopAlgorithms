{
  "problem": {
    "title": "Unique Paths II",
    "leetcode_id": null,
    "category": "String/Array/Matrix",
    "description": "You are given an m x n integer array obstacleGrid. There is a robot initially located at the top-left corner (i.e., obstacleGrid[0][0]).",
    "assumptions": [],
    "example": {}
  },
  "solutions": [
    {
      "title": "Solution 1 – Dynamic Programming",
      "description": "Use DP with obstacle handling.",
      "code": "public int uniquePathsWithObstacles(int[][] obstacleGrid) {\n    int m = obstacleGrid.length, n = obstacleGrid[0].length;\n    \n    if (obstacleGrid[0][0] == 1) return 0;\n    \n    obstacleGrid[0][0] = 1;\n    \n    for (int i = 1; i < m; i++) {\n        obstacleGrid[i][0] = (obstacleGrid[i][0] == 0 && obstacleGrid[i - 1][0] == 1) ? 1 : 0;\n    }\n    \n    for (int j = 1; j < n; j++) {\n        obstacleGrid[0][j] = (obstacleGrid[0][j] == 0 && obstacleGrid[0][j - 1] == 1) ? 1 : 0;\n    }\n    \n    for (int i = 1; i < m; i++) {\n        for (int j = 1; j < n; j++) {\n            if (obstacleGrid[i][j] == 0) {\n                obstacleGrid[i][j] = obstacleGrid[i - 1][j] + obstacleGrid[i][j - 1];\n            } else {\n                obstacleGrid[i][j] = 0;\n            }\n        }\n    }\n    \n    return obstacleGrid[m - 1][n - 1];\n}",
      "language": "java",
      "complexity": {
        "time": "O(m × n)",
        "space": "O(1)"
      }
    }
  ],
  "variations": [],
  "navigation": {
    "previous": "two-sum.html",
    "next": "two-sum-iii.html"
  }
}