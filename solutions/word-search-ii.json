{
  "problem": {
    "title": "Word Search II",
    "leetcode_id": null,
    "category": "String/Array/Matrix",
    "description": "Given an m x n board of characters and a list of strings words, return all words on the board.",
    "assumptions": [],
    "example": {}
  },
  "solutions": [
    {
      "title": "Solution 1 – Trie + DFS",
      "description": "Use Trie and DFS to find all words.",
      "code": "public List findWords(char[][] board, String[] words) {\n    List result = new ArrayList<>();\n    TrieNode root = buildTrie(words);\n    \n    for (int i = 0; i < board.length; i++) {\n        for (int j = 0; j < board[0].length; j++) {\n            dfs(board, i, j, root, result);\n        }\n    }\n    \n    return result;\n}\n\nprivate void dfs(char[][] board, int i, int j, TrieNode node, List result) {\n    char c = board[i][j];\n    if (c == '#' || node.children[c - 'a'] == null) return;\n    \n    node = node.children[c - 'a'];\n    if (node.word != null) {\n        result.add(node.word);\n        node.word = null; // Avoid duplicates\n    }\n    \n    board[i][j] = '#';\n    if (i > 0) dfs(board, i - 1, j, node, result);\n    if (j > 0) dfs(board, i, j - 1, node, result);\n    if (i < board.length - 1) dfs(board, i + 1, j, node, result);\n    if (j < board[0].length - 1) dfs(board, i, j + 1, node, result);\n    board[i][j] = c;\n}\n\nprivate TrieNode buildTrie(String[] words) {\n    TrieNode root = new TrieNode();\n    for (String word : words) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            if (node.children[c - 'a'] == null) {\n                node.children[c - 'a'] = new TrieNode();\n            }\n            node = node.children[c - 'a'];\n        }\n        node.word = word;\n    }\n    return root;\n}\n\nclass TrieNode {\n    TrieNode[] children = new TrieNode[26];\n    String word;\n}",
      "language": "java",
      "complexity": {
        "time": "O(m × n × 4^L)",
        "space": "O(k × L)"
      }
    }
  ],
  "variations": [],
  "navigation": {
    "previous": "two-sum.html",
    "next": "two-sum-iii.html"
  }
}