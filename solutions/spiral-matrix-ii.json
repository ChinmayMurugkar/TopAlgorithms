{
  "problem": {
    "title": "Spiral Matrix II",
    "leetcode_id": null,
    "category": "String/Array/Matrix",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",
    "assumptions": [],
    "example": {}
  },
  "solutions": [
    {
      "title": "Solution 1 – Layer by Layer",
      "description": "Fill matrix in spiral order layer by layer.",
      "code": "public int[][] generateMatrix(int n) {\n    int[][] matrix = new int[n][n];\n    int num = 1;\n    int top = 0, bottom = n - 1;\n    int left = 0, right = n - 1;\n    \n    while (top <= bottom && left <= right) {\n        for (int j = left; j <= right; j++) {\n            matrix[top][j] = num++;\n        }\n        top++;\n        \n        for (int i = top; i <= bottom; i++) {\n            matrix[i][right] = num++;\n        }\n        right--;\n        \n        if (top <= bottom) {\n            for (int j = right; j >= left; j--) {\n                matrix[bottom][j] = num++;\n            }\n            bottom--;\n        }\n        \n        if (left <= right) {\n            for (int i = bottom; i >= top; i--) {\n                matrix[i][left] = num++;\n            }\n            left++;\n        }\n    }\n    \n    return matrix;\n}",
      "language": "java",
      "complexity": {
        "time": "O(n²)",
        "space": "O(1)"
      }
    },
    {
      "title": "Solution 1 – Layer by Layer",
      "description": "Fill matrix in spiral order layer by layer.",
      "code": "public int[][] generateMatrix(int n) {\n    int[][] matrix = new int[n][n];\n    int num = 1;\n    int top = 0, bottom = n - 1;\n    int left = 0, right = n - 1;\n    \n    while (top <= bottom && left <= right) {\n        for (int j = left; j <= right; j++) {\n            matrix[top][j] = num++;\n        }\n        top++;\n        \n        for (int i = top; i <= bottom; i++) {\n            matrix[i][right] = num++;\n        }\n        right--;\n        \n        if (top <= bottom) {\n            for (int j = right; j >= left; j--) {\n                matrix[bottom][j] = num++;\n            }\n            bottom--;\n        }\n        \n        if (left <= right) {\n            for (int i = bottom; i >= top; i--) {\n                matrix[i][left] = num++;\n            }\n            left++;\n        }\n    }\n    \n    return matrix;\n}",
      "language": "java",
      "complexity": {
        "time": "O(n²)",
        "space": "O(1)"
      }
    }
  ],
  "variations": [],
  "navigation": {}
}