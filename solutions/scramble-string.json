{
  "problem": {
    "title": "Scramble String",
    "leetcode_id": null,
    "category": "String/Array/Matrix",
    "description": "We can scramble a string s to get a string t using the following algorithm:",
    "assumptions": [],
    "example": {}
  },
  "solutions": [
    {
      "title": "Solution 1 – Dynamic Programming",
      "description": "Use DP to check if strings are scramble.",
      "code": "public boolean isScramble(String s1, String s2) {\n    if (s1.equals(s2)) return true;\n    if (s1.length() != s2.length()) return false;\n    \n    int n = s1.length();\n    boolean[][][] dp = new boolean[n][n][n + 1];\n    \n    for (int len = 1; len <= n; len++) {\n        for (int i = 0; i <= n - len; i++) {\n            for (int j = 0; j <= n - len; j++) {\n                if (len == 1) {\n                    dp[i][j][len] = s1.charAt(i) == s2.charAt(j);\n                } else {\n                    for (int k = 1; k < len; k++) {\n                        if ((dp[i][j][k] && dp[i + k][j + k][len - k]) ||\n                            (dp[i][j + len - k][k] && dp[i + k][j][len - k])) {\n                            dp[i][j][len] = true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    return dp[0][0][n];\n}",
      "language": "java",
      "complexity": {
        "time": "O(n⁴)",
        "space": "O(n³)"
      }
    },
    {
      "title": "Solution 1 – Dynamic Programming",
      "description": "Use DP to check if strings are scramble.",
      "code": "public boolean isScramble(String s1, String s2) {\n    if (s1.equals(s2)) return true;\n    if (s1.length() != s2.length()) return false;\n    \n    int n = s1.length();\n    boolean[][][] dp = new boolean[n][n][n + 1];\n    \n    for (int len = 1; len <= n; len++) {\n        for (int i = 0; i <= n - len; i++) {\n            for (int j = 0; j <= n - len; j++) {\n                if (len == 1) {\n                    dp[i][j][len] = s1.charAt(i) == s2.charAt(j);\n                } else {\n                    for (int k = 1; k < len; k++) {\n                        if ((dp[i][j][k] && dp[i + k][j + k][len - k]) ||\n                            (dp[i][j + len - k][k] && dp[i + k][j][len - k])) {\n                            dp[i][j][len] = true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    return dp[0][0][n];\n}",
      "language": "java",
      "complexity": {
        "time": "O(n⁴)",
        "space": "O(n³)"
      }
    }
  ],
  "variations": [],
  "navigation": {}
}