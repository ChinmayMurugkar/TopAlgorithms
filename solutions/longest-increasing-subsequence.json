{
  "problem": {
    "title": "Longest Increasing Subsequence",
    "leetcode_id": null,
    "category": "String/Array/Matrix",
    "description": "Given an integer array nums, return the length of the longest strictly increasing subsequence.",
    "assumptions": [],
    "example": {}
  },
  "solutions": [
    {
      "title": "Solution 1 – Dynamic Programming",
      "description": "Use DP to find longest increasing subsequence.",
      "code": "public int lengthOfLIS(int[] nums) {\n    if (nums == null || nums.length == 0) return 0;\n    \n    int[] dp = new int[nums.length];\n    Arrays.fill(dp, 1);\n    \n    int maxLength = 1;\n    \n    for (int i = 1; i < nums.length; i++) {\n        for (int j = 0; j < i; j++) {\n            if (nums[i] > nums[j]) {\n                dp[i] = Math.max(dp[i], dp[j] + 1);\n            }\n        }\n        maxLength = Math.max(maxLength, dp[i]);\n    }\n    \n    return maxLength;\n}",
      "language": "java",
      "complexity": {
        "time": "O(n²)",
        "space": "O(n)"
      }
    },
    {
      "title": "Solution 1 – Dynamic Programming",
      "description": "Use DP to find longest increasing subsequence.",
      "code": "public int lengthOfLIS(int[] nums) {\n    if (nums == null || nums.length == 0) return 0;\n    \n    int[] dp = new int[nums.length];\n    Arrays.fill(dp, 1);\n    \n    int maxLength = 1;\n    \n    for (int i = 1; i < nums.length; i++) {\n        for (int j = 0; j < i; j++) {\n            if (nums[i] > nums[j]) {\n                dp[i] = Math.max(dp[i], dp[j] + 1);\n            }\n        }\n        maxLength = Math.max(maxLength, dp[i]);\n    }\n    \n    return maxLength;\n}",
      "language": "java",
      "complexity": {
        "time": "O(n²)",
        "space": "O(n)"
      }
    }
  ],
  "variations": [],
  "navigation": {}
}