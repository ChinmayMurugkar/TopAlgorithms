{
  "problem": {
    "title": "Shortest Palindrome",
    "leetcode_id": null,
    "category": "String/Array/Matrix",
    "description": "You are given a string s. You can convert s to a palindrome by adding characters in front of it.",
    "assumptions": [],
    "example": {}
  },
  "solutions": [
    {
      "title": "Solution 1 – KMP Algorithm",
      "description": "Use KMP algorithm to find the longest palindromic prefix.",
      "code": "public String shortestPalindrome(String s) {\n    String temp = s + \"#\" + new StringBuilder(s).reverse().toString();\n    int[] table = getTable(temp);\n    \n    return new StringBuilder(s.substring(table[table.length - 1])).reverse().toString() + s;\n}\n\nprivate int[] getTable(String s) {\n    int[] table = new int[s.length()];\n    int j = 0;\n    \n    for (int i = 1; i < s.length(); i++) {\n        while (j > 0 && s.charAt(i) != s.charAt(j)) {\n            j = table[j - 1];\n        }\n        if (s.charAt(i) == s.charAt(j)) {\n            j++;\n        }\n        table[i] = j;\n    }\n    \n    return table;\n}",
      "language": "java",
      "complexity": {
        "time": "O(n)",
        "space": "O(n)"
      }
    },
    {
      "title": "Solution 1 – KMP Algorithm",
      "description": "Use KMP algorithm to find the longest palindromic prefix.",
      "code": "public String shortestPalindrome(String s) {\n    String temp = s + \"#\" + new StringBuilder(s).reverse().toString();\n    int[] table = getTable(temp);\n    \n    return new StringBuilder(s.substring(table[table.length - 1])).reverse().toString() + s;\n}\n\nprivate int[] getTable(String s) {\n    int[] table = new int[s.length()];\n    int j = 0;\n    \n    for (int i = 1; i < s.length(); i++) {\n        while (j > 0 && s.charAt(i) != s.charAt(j)) {\n            j = table[j - 1];\n        }\n        if (s.charAt(i) == s.charAt(j)) {\n            j++;\n        }\n        table[i] = j;\n    }\n    \n    return table;\n}",
      "language": "java",
      "complexity": {
        "time": "O(n)",
        "space": "O(n)"
      }
    }
  ],
  "variations": [],
  "navigation": {}
}