{
  "problem": {
    "title": "Count Primes",
    "leetcode_id": null,
    "category": "String/Array/Matrix",
    "description": "Given an integer n, return the number of prime numbers that are strictly less than n.",
    "assumptions": [],
    "example": {}
  },
  "solutions": [
    {
      "title": "Solution 1 – Sieve of Eratosthenes",
      "description": "Use the Sieve of Eratosthenes to count prime numbers efficiently.",
      "code": "public int countPrimes(int n) {\n    if (n <= 2) return 0;\n    \n    boolean[] isPrime = new boolean[n];\n    Arrays.fill(isPrime, true);\n    isPrime[0] = isPrime[1] = false;\n    \n    for (int i = 2; i * i < n; i++) {\n        if (isPrime[i]) {\n            for (int j = i * i; j < n; j += i) {\n                isPrime[j] = false;\n            }\n        }\n    }\n    \n    int count = 0;\n    for (int i = 2; i < n; i++) {\n        if (isPrime[i]) count++;\n    }\n    \n    return count;\n}",
      "language": "java",
      "complexity": {
        "time": "O(n log log n)",
        "space": "O(n)"
      }
    },
    {
      "title": "Solution 1 – Sieve of Eratosthenes",
      "description": "Use the Sieve of Eratosthenes to count prime numbers efficiently.",
      "code": "public int countPrimes(int n) {\n    if (n <= 2) return 0;\n    \n    boolean[] isPrime = new boolean[n];\n    Arrays.fill(isPrime, true);\n    isPrime[0] = isPrime[1] = false;\n    \n    for (int i = 2; i * i < n; i++) {\n        if (isPrime[i]) {\n            for (int j = i * i; j < n; j += i) {\n                isPrime[j] = false;\n            }\n        }\n    }\n    \n    int count = 0;\n    for (int i = 2; i < n; i++) {\n        if (isPrime[i]) count++;\n    }\n    \n    return count;\n}",
      "language": "java",
      "complexity": {
        "time": "O(n log log n)",
        "space": "O(n)"
      }
    }
  ],
  "variations": [],
  "navigation": {}
}