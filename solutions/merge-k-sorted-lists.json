{
  "problem": {
    "title": "Merge k Sorted Lists",
    "leetcode_id": null,
    "category": "String/Array/Matrix",
    "description": "You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.",
    "assumptions": [],
    "example": {}
  },
  "solutions": [
    {
      "title": "Solution 1 â€“ Min Heap",
      "description": "Use min heap to merge k sorted lists.",
      "code": "public ListNode mergeKLists(ListNode[] lists) {\n    if (lists == null || lists.length == 0) return null;\n    \n    PriorityQueue pq = new PriorityQueue<>((a, b) -> a.val - b.val);\n    \n    for (ListNode list : lists) {\n        if (list != null) {\n            pq.offer(list);\n        }\n    }\n    \n    ListNode dummy = new ListNode(0);\n    ListNode current = dummy;\n    \n    while (!pq.isEmpty()) {\n        ListNode node = pq.poll();\n        current.next = node;\n        current = current.next;\n        \n        if (node.next != null) {\n            pq.offer(node.next);\n        }\n    }\n    \n    return dummy.next;\n}",
      "language": "java",
      "complexity": {
        "time": "O(n log k)",
        "space": "O(k)"
      }
    }
  ],
  "variations": [],
  "navigation": {
    "previous": "two-sum.html",
    "next": "two-sum-iii.html"
  }
}