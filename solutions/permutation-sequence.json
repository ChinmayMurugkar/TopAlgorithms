{
  "problem": {
    "title": "Permutation Sequence",
    "leetcode_id": null,
    "category": "String/Array/Matrix",
    "description": "The set [1, 2, 3, ..., n] contains a total of n! unique permutations.",
    "assumptions": [],
    "example": {}
  },
  "solutions": [
    {
      "title": "Solution 1 – Mathematical",
      "description": "Use mathematical approach to find kth permutation.",
      "code": "public String getPermutation(int n, int k) {\n    List numbers = new ArrayList<>();\n    int[] factorial = new int[n + 1];\n    factorial[0] = 1;\n    \n    for (int i = 1; i <= n; i++) {\n        factorial[i] = factorial[i - 1] * i;\n        numbers.add(i);\n    }\n    \n    k--;\n    StringBuilder result = new StringBuilder();\n    \n    for (int i = n; i > 0; i--) {\n        int index = k / factorial[i - 1];\n        result.append(numbers.get(index));\n        numbers.remove(index);\n        k %= factorial[i - 1];\n    }\n    \n    return result.toString();\n}",
      "language": "java",
      "complexity": {
        "time": "O(n²)",
        "space": "O(n)"
      }
    },
    {
      "title": "Solution 1 – Mathematical",
      "description": "Use mathematical approach to find kth permutation.",
      "code": "public String getPermutation(int n, int k) {\n    List numbers = new ArrayList<>();\n    int[] factorial = new int[n + 1];\n    factorial[0] = 1;\n    \n    for (int i = 1; i <= n; i++) {\n        factorial[i] = factorial[i - 1] * i;\n        numbers.add(i);\n    }\n    \n    k--;\n    StringBuilder result = new StringBuilder();\n    \n    for (int i = n; i > 0; i--) {\n        int index = k / factorial[i - 1];\n        result.append(numbers.get(index));\n        numbers.remove(index);\n        k %= factorial[i - 1];\n    }\n    \n    return result.toString();\n}",
      "language": "java",
      "complexity": {
        "time": "O(n²)",
        "space": "O(n)"
      }
    }
  ],
  "variations": [],
  "navigation": {}
}