{
  "problem": {
    "title": "Reverse Vowels of a String",
    "leetcode_id": null,
    "category": "String/Array/Matrix",
    "description": "Given a string s, reverse only all the vowels in the string and return it.",
    "assumptions": [],
    "example": {}
  },
  "solutions": [
    {
      "title": "Solution 1 – Two Pointers",
      "description": "Use two pointers to reverse vowels.",
      "code": "public String reverseVowels(String s) {\n    char[] chars = s.toCharArray();\n    int left = 0, right = chars.length - 1;\n    \n    while (left < right) {\n        while (left < right && !isVowel(chars[left])) left++;\n        while (left < right && !isVowel(chars[right])) right--;\n        \n        if (left < right) {\n            char temp = chars[left];\n            chars[left] = chars[right];\n            chars[right] = temp;\n            left++;\n            right--;\n        }\n    }\n    \n    return new String(chars);\n}\n\nprivate boolean isVowel(char c) {\n    return \"aeiouAEIOU\".indexOf(c) != -1;\n}",
      "language": "java",
      "complexity": {
        "time": "O(n)",
        "space": "O(n)"
      }
    },
    {
      "title": "Solution 1 – Two Pointers",
      "description": "Use two pointers to reverse vowels.",
      "code": "public String reverseVowels(String s) {\n    char[] chars = s.toCharArray();\n    int left = 0, right = chars.length - 1;\n    \n    while (left < right) {\n        while (left < right && !isVowel(chars[left])) left++;\n        while (left < right && !isVowel(chars[right])) right--;\n        \n        if (left < right) {\n            char temp = chars[left];\n            chars[left] = chars[right];\n            chars[right] = temp;\n            left++;\n            right--;\n        }\n    }\n    \n    return new String(chars);\n}\n\nprivate boolean isVowel(char c) {\n    return \"aeiouAEIOU\".indexOf(c) != -1;\n}",
      "language": "java",
      "complexity": {
        "time": "O(n)",
        "space": "O(n)"
      }
    }
  ],
  "variations": [],
  "navigation": {}
}