{
  "problem": {
    "title": "Decode Ways",
    "leetcode_id": null,
    "category": "String/Array/Matrix",
    "description": "A message containing letters from A-Z can be encoded into numbers using the following mapping: 'A' -> '1', 'B' -> '2', ..., 'Z' -> '26'.",
    "assumptions": [],
    "example": {}
  },
  "solutions": [
    {
      "title": "Solution 1 – Dynamic Programming",
      "description": "Use DP to count ways to decode the string.",
      "code": "public int numDecodings(String s) {\n    if (s == null || s.length() == 0) return 0;\n    \n    int n = s.length();\n    int[] dp = new int[n + 1];\n    dp[0] = 1;\n    dp[1] = s.charAt(0) == '0' ? 0 : 1;\n    \n    for (int i = 2; i <= n; i++) {\n        int oneDigit = Integer.parseInt(s.substring(i - 1, i));\n        int twoDigits = Integer.parseInt(s.substring(i - 2, i));\n        \n        if (oneDigit >= 1 && oneDigit <= 9) {\n            dp[i] += dp[i - 1];\n        }\n        \n        if (twoDigits >= 10 && twoDigits <= 26) {\n            dp[i] += dp[i - 2];\n        }\n    }\n    \n    return dp[n];\n}",
      "language": "java",
      "complexity": {
        "time": "O(n)",
        "space": "O(n)"
      }
    },
    {
      "title": "Solution 1 – Dynamic Programming",
      "description": "Use DP to count ways to decode the string.",
      "code": "public int numDecodings(String s) {\n    if (s == null || s.length() == 0) return 0;\n    \n    int n = s.length();\n    int[] dp = new int[n + 1];\n    dp[0] = 1;\n    dp[1] = s.charAt(0) == '0' ? 0 : 1;\n    \n    for (int i = 2; i <= n; i++) {\n        int oneDigit = Integer.parseInt(s.substring(i - 1, i));\n        int twoDigits = Integer.parseInt(s.substring(i - 2, i));\n        \n        if (oneDigit >= 1 && oneDigit <= 9) {\n            dp[i] += dp[i - 1];\n        }\n        \n        if (twoDigits >= 10 && twoDigits <= 26) {\n            dp[i] += dp[i - 2];\n        }\n    }\n    \n    return dp[n];\n}",
      "language": "java",
      "complexity": {
        "time": "O(n)",
        "space": "O(n)"
      }
    }
  ],
  "variations": [],
  "navigation": {}
}